// <auto-generated />
using System;
using ContractManagement.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ContractManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ContractManagementContext))]
    [Migration("20251024131410_createClient")]
    partial class createClient
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContractManagement.Domain.Entity.Clientes.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAtualizao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_update");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_created");

                    b.HasKey("Id");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("ContractManagement.Domain.Entity.Pedidos.ItemPedido", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAtualizao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdProduto")
                        .HasColumnType("uuid")
                        .HasColumnName("id_pedidos");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Produto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Quantidade")
                        .HasColumnType("integer");

                    b.Property<Guid?>("pedidoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("pedidoId");

                    b.ToTable("itempedido", (string)null);
                });

            modelBuilder.Entity("ContractManagement.Domain.Entity.Pedidos.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAtualizao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_update");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dt_created");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uuid");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("valor_total");

                    b.HasKey("Id");

                    b.HasIndex("Numero")
                        .IsUnique();

                    b.ToTable("pedido", (string)null);
                });

            modelBuilder.Entity("ContractManagement.Domain.Entity.Clientes.Cliente", b =>
                {
                    b.OwnsOne("ContractManagement.Domain.Entity.Enderecos.Endereco", "Endereco", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Cep")
                                .IsRequired()
                                .HasMaxLength(8)
                                .HasColumnType("character varying(8)")
                                .HasColumnName("cep");

                            b1.Property<string>("Cidade")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("cidade");

                            b1.Property<string>("Estado")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("estado");

                            b1.Property<string>("Numero")
                                .IsRequired()
                                .HasMaxLength(4)
                                .HasColumnType("character varying(4)")
                                .HasColumnName("numero");

                            b1.Property<string>("Rua")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("rua");

                            b1.HasKey("ClienteId");

                            b1.ToTable("enderecos", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("ContractManagement.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("email");

                            b1.HasKey("ClienteId");

                            b1.ToTable("clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("ContractManagement.Domain.ValueObjects.FirstName", "Nome", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("nome");

                            b1.HasKey("ClienteId");

                            b1.ToTable("clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.OwnsOne("ContractManagement.Domain.ValueObjects.LastName", "LastName", b1 =>
                        {
                            b1.Property<Guid>("ClienteId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("sobrenome");

                            b1.HasKey("ClienteId");

                            b1.ToTable("clientes");

                            b1.WithOwner()
                                .HasForeignKey("ClienteId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Endereco");

                    b.Navigation("LastName")
                        .IsRequired();

                    b.Navigation("Nome")
                        .IsRequired();
                });

            modelBuilder.Entity("ContractManagement.Domain.Entity.Pedidos.ItemPedido", b =>
                {
                    b.HasOne("ContractManagement.Domain.Entity.Pedidos.Pedido", null)
                        .WithMany("Items")
                        .HasForeignKey("pedidoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ContractManagement.Domain.Entity.Pedidos.Pedido", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
